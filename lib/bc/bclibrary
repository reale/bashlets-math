#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-5 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


#@public
function bashlets::math::bc::bclibrary::load()
{
    echo "
        /* take integer part */
        define int(x) {
            auto old_scale
            old_scale=scale
            scale=0; ret=x/1
            scale=old_scale
            return ret
        }

        /* smallest integer >= arg */
        define ceil(x) {
            auto intx
            intx=int(x)
            if (intx<x) intx+=1
            return intx
        }

        /* largest integer <= arg */
        define floor(x) {
            auto intx
            intx=int(x)
            if (intx>x) intx-=1
            return intx
        }

        /* logarithms in arbitrary base */
        define log(x, base) {
            return l(x)/l(base)
        }

        /* count the digits in the base-10 representation of an integer */
        define count_digits10(n) {
            auto x, old_scale
            x=log(int(n), 10)
            if (x == ceil(x)) {
                old_scale=scale
                scale=0; x=x/1
                scale=old_scale
                return x
            } else {
                return ceil(x)
            }
        }
    "
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
